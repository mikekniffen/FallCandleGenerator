{"version":3,"sources":["images/leaf1.png","images/candle_transparent.png","images/background-2.jpg","scentgen/scentutil.js","types.ts","floatingbackground.tsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","scentTypes","scents","adjectives","Object","keys","reduce","accumulator","scent","includes","push","nouns","randomAdjective","Math","floor","random","length","generateScent","appModes","wait","generate","aspectRatio","dTms","scrollRatePx","zoomRatePx","direction","getWindowDimensions","window","width","innerWidth","height","innerHeight","getMinLeft","windowWidth","imgHeight","getImgHeight","windowSize","target","getGenerateTargetImgHeight","FloatingBackground","props","useState","disableAnimation","setDisableAnimation","windowDimensions","setWindowDimensions","setImgHeight","minLeft","setMinLeft","left","setLeft","Decrease","leftDirection","setLeftDirection","top","setTop","animationTick","mode","Increase","targetHeight","abs","useEffect","handleResize","newDimensions","newImgHeight","newMinLeft","addEventListener","removeEventListener","id","setInterval","clearInterval","backgroundStyle","position","overflowY","overflowX","getBackgroundStyle","src","background","style","App","setMode","currentScent","setCurrentScent","leafButtonClass","className","onClick","candle","leaf","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a480cc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaf1.b2f7252a.png\";","module.exports = __webpack_public_path__ + \"static/media/candle_transparent.4169d27f.png\";","module.exports = __webpack_public_path__ + \"static/media/background-2.d7bf4680.jpg\";","const scentTypes = {\r\n    \"noun\": 1,\r\n    \"adjective\": 2\r\n}\r\n\r\nconst scents = {\r\n    \"Fireside\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Marshmallow\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Pumpkin\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Spice\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Chestnut\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Clove\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Leaves\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Autumn\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Glow\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Warm\": [scentTypes.adjective],\r\n    \"Sweater\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Weather\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Cocoa\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Salted\": [scentTypes.adjective],\r\n    \"Caramel\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Hot\": [scentTypes.adjective],\r\n    \"Woods\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Forest\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Latte\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Coffee\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Cozy\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Sunlight\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Apple\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Sweet\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Cinnamon\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Crisp\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Morning\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Afternoon\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Orchard\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Fall\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Vanilla\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Moon\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Pie\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Cider\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Acorn\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Flannel\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Harvest\": [scentTypes.noun, scentTypes.adjective],\r\n    \"Moonlit\": [scentTypes.adjective],\r\n    \"Moonlight\": [scentTypes.noun],\r\n    \"Gathering\": [scentTypes.noun],\r\n    \"Wreath\": [scentTypes.noun]\r\n};\r\n\r\nexport const adjectives = Object.keys(scents).reduce((accumulator, scent) => {\r\n    if (scents[scent].includes(scentTypes.adjective)){\r\n        accumulator.push(scent);\r\n    }\r\n    return accumulator;\r\n}, []);\r\n\r\nexport const nouns = Object.keys(scents).reduce((accumulator, scent) => {\r\n    if (scents[scent].includes(scentTypes.noun)){\r\n        accumulator.push(scent);\r\n    }\r\n    return accumulator;\r\n}, []);\r\n\r\nfunction randomAdjective() {\r\n    return adjectives[Math.floor(Math.random() * adjectives.length)];\r\n}\r\n\r\nfunction randomNoun() {\r\n    return nouns[Math.floor(Math.random() * nouns.length)];\r\n}\r\n\r\nexport function generateScent() {\r\n    return `${randomAdjective()} ${randomAdjective()} ${randomNoun()}`;\r\n}","export const appModes = {\r\n    wait: 1,\r\n    generate: 2\r\n  }","import React, { useState, useEffect } from 'react';\r\nimport background from './images/background-2.jpg';\r\nimport { appModes } from './types'\r\n\r\nconst backgroundWidth = 3840;\r\nconst backgroundHeight = 2400;\r\nconst aspectRatio = 3840 / 2400;\r\nconst dTms = 33;\r\nconst scrollRatePx = 1;\r\nconst zoomRatePx = 50;\r\n\r\nconst direction = {\r\n    \"Increase\": 1,\r\n    \"Decrease\": 2,\r\n};\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nfunction getBackgroundStyle(\r\n    left: number,\r\n    top: number,\r\n    height: number): React.CSSProperties {\r\n    return {\r\n        height: `${height}px`,\r\n        position: \"relative\",\r\n        overflowY: \"hidden\",\r\n        overflowX: \"hidden\",\r\n        left: left,\r\n        top: top\r\n    };\r\n}\r\n\r\nfunction getMinLeft(windowWidth: number, imgHeight: number): number {\r\n    const actualWidth = aspectRatio * imgHeight;\r\n    return windowWidth - actualWidth;\r\n}\r\n\r\nfunction getImgHeight(windowSize: { width: number, height: number }): number {\r\n    const target = windowSize.height * 2.5;\r\n    if (target * aspectRatio < windowSize.width) {\r\n        return windowSize.width / aspectRatio;\r\n    }\r\n    return target;\r\n}\r\n\r\nfunction getGenerateTargetImgHeight(windowSize: { width: number, height: number }) {\r\n    const target = windowSize.height;\r\n    if (target * aspectRatio < windowSize.width) {\r\n        return windowSize.width / aspectRatio;\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function FloatingBackground(props: { mode: number }) {\r\n\r\n    const [disableAnimation, setDisableAnimation] = useState(false);\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    const [imgHeight, setImgHeight] = useState(getImgHeight(windowDimensions));\r\n    const [minLeft, setMinLeft] = useState(getMinLeft(windowDimensions.width, imgHeight));\r\n    const [left, setLeft] = useState(0);\r\n    const [leftDirection, setLeftDirection] = useState(direction.Decrease);\r\n\r\n    const [top, setTop] = useState(0);\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            const newDimensions = getWindowDimensions();\r\n            const newImgHeight = props.mode === appModes.wait \r\n                ? getImgHeight(newDimensions)\r\n                : getGenerateTargetImgHeight(newDimensions);\r\n            const newMinLeft = getMinLeft(newDimensions.width, newImgHeight);\r\n            setWindowDimensions(newDimensions);\r\n            setMinLeft(getMinLeft(newDimensions.width, newImgHeight));\r\n            setImgHeight(newImgHeight);\r\n            if (newMinLeft > -5) {\r\n                setDisableAnimation(true);\r\n            }\r\n            else {\r\n                setDisableAnimation(false);\r\n            }\r\n        }\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    function animationTick() {\r\n        if (disableAnimation) { return; }\r\n        \r\n        if (props.mode === appModes.wait) {\r\n            if (imgHeight < getImgHeight(windowDimensions)) {\r\n                setImgHeight(imgHeight + zoomRatePx);\r\n            }\r\n\r\n            if (leftDirection === direction.Decrease) {\r\n                setLeft(left - scrollRatePx);\r\n                if (left <= minLeft) {\r\n                    setLeftDirection(direction.Increase);\r\n                }\r\n            } else {\r\n                setLeft(left + scrollRatePx);\r\n                if (left >= 0) {\r\n                    setLeftDirection(direction.Decrease);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const targetHeight = getGenerateTargetImgHeight(windowDimensions);\r\n            if (imgHeight > targetHeight) { \r\n                    setImgHeight(imgHeight - zoomRatePx); \r\n            } else { \r\n                setImgHeight(targetHeight)\r\n            }\r\n            if (Math.abs(left) > zoomRatePx) { setLeft(left + zoomRatePx); } else { setLeft(0); }\r\n            if (Math.abs(top) > zoomRatePx) { setTop(top + zoomRatePx); } else {setTop(0); }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let id = setInterval(animationTick, dTms);\r\n        return () => clearInterval(id);\r\n    });\r\n\r\n    const backgroundStyle = getBackgroundStyle(left, top, imgHeight);\r\n\r\n    return (\r\n        <img src={background} style={backgroundStyle}></img>\r\n    );\r\n\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport leaf from './images/leaf1.png';\nimport candle from './images/candle_transparent.png';\nimport { generateScent } from './scentgen/scentutil';\nimport { FloatingBackground } from './floatingbackground';\nimport './App.css';\nimport { appModes } from './types'\n\n\nfunction App() {\n\n  const [mode, setMode] = useState(appModes.wait);\n  const [currentScent, setCurrentScent] = useState(\"\");\n\n  function showScent() {\n    setMode(appModes.generate);\n    setCurrentScent(generateScent());\n  }\n\n  function hideScent() {\n    setMode(appModes.wait);\n  }\n\n  const leafButtonClass = mode === appModes.wait \n      ? \"centeredLeaf zoomInDown\"\n      : \"centeredLeaf zoomOutUp\"\n\n  if (mode === appModes.generate) {\n    return (\n      <div className=\"App\">\n        <FloatingBackground mode={mode}></FloatingBackground>\n        <div className=\"centeredCandle\" onClick={hideScent}>\n          <img className=\"candleImage\" src={candle}></img>\n          <span className=\"scentText\">{currentScent}</span>\n        </div>\n        \n      </div>\n    );\n  }\n  else {\n    return (\n      <div className=\"App\">\n        <FloatingBackground mode={mode}></FloatingBackground>\n        <div className={leafButtonClass} >\n          <img className=\"leafImage\" onClick={showScent} src={leaf}/>\n          <span className=\"createText\">Create</span>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}